---
http_interactions:
- request:
    method: get
    uri: https://www.sagicorjamaica.com/personal/banking/fx-access
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Length:
      - '17760'
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding
      Server:
      - Microsoft-IIS/10.0
      X-Aspnetmvc-Version:
      - '4.0'
      X-Aspnet-Version:
      - 4.0.30319
      X-Ua-Compatible:
      - IE=edge
      Set-Cookie:
      - ARRAffinity=27c9e4cb5fee417cdf2103e310fce26770263b82301b8106662109d65aef539a;Path=/;HttpOnly;Domain=www.sagicorjamaica.com
      Date:
      - Fri, 13 Jul 2018 08:02:23 GMT
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=7; IE=8; IE=9; IE=EDGE" />
    <title>Fx Access - Sagicor Group Jamaica</title>
    <link href="/favicon.ico" rel="shortcut icon" type="image/x-icon" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="description" content="Sagicor Group Jamaica is a full service financial institution offering banking, investments, life & health insurance, pensions, and real estate services, with an outstanding history and reputation for leading innovation.">
    <meta name="author" content="">
    <meta name="keywords" content="Insurance, bank, life, health, pension, investment stockbrokerage, Jamaica">
    <meta name="viewport" content='width=1024' />

    <link href="/Content/themes/bootstrap3/css/bootstrap.css" rel="stylesheet" />
    <link href="/Content/cssinside?v=Rs_BQCaml8Ji9lpARISuviPJILgkE02KFb_jCN5kjAE1" rel="stylesheet"/>

    <link href="/Content/fontawesome?v=Bu2sLmzD9mY-UmvipKPuh00spXag8otWqDRa_LKIYAI1" rel="stylesheet"/>

    <script src="/bundles/modernizr?v=qVODBytEBVVePTNtSFXgRX0NCEjh9U_Oj8ePaSiRcGg1"></script>


    <link href="/Content/themes/bootstrap-datepicker/css/datepicker3.css" rel="stylesheet" />
    <link href="/Content/themes/fancybox/jquery.fancybox-1.3.4.css" rel="stylesheet" />
    <link href="/Content/themes/sagicortheme/common.css" rel="stylesheet" />
    <link href="/Content/themes/sagicortheme/subscribe.css" rel="stylesheet" />
    <link href="/Content/themes/cool-share/plugin.css" rel="stylesheet" />

    <!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    

    <script src="https://www.google.com/recaptcha/api.js" async defer></script>

    <!-- Global site tag (gtag.js) - AdWords: 944920114 -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=AW-944920114"></script>

    <script> window.dataLayer = window.dataLayer || []; function gtag() { dataLayer.push(arguments); } gtag('js', new Date()); gtag('config', 'AW-944920114'); </script> 
</head>
<body>
    <div style="width:100%; min-width:1200px;" class="greyboxContainer">

        <div class="container" style="padding-left:0;padding-right:0;z-index:10">
            <div class="col-sm-3 boxshadow" style="width:275px; padding-left:0px; padding-right:0px;margin-bottom:-5em;">
                <div class="logoContainer whiteboxContainer">
                    <a href="/Home/Index"><img src="/Content/images/sagicorlogo.gif" style="width:50%" /></a>
                </div>

                <div class="whiteboxContainer">

                    <div class="btn-group" style="position: relative; ">
                        <a class="btn btn-success" href="/sign-in" style="text-decoration:none; color:#fff">Sign In</a>
                        <button type="button" class="btn btn-success dropdown-toggle" data-toggle="dropdown">
                            <span class="caret"></span>
                            <span class="sr-only">Toggle Dropdown</span>
                        </button>
                        <ul class="dropdown-menu" role="menu" style="left:0;width:200px">
                            <li><a href="https://ebank.sagicorjamaica.com/">e-bank (Online Banking)</a></li>
                            <li class="divider"></li>
                            <li><a href="https://my.sagicorjamaica.com/Clientweb/">ClientWeb</a></li>
                            <li class="divider"></li>
                            <li><a href="https://my.sagicor.com/topas/selection_index.html">My Sagicor</a></li>
                            <li class="divider"></li>
                            <li><a href="https://my.sagicor.com/groupwebja/default.asp"> Group Web</a></li>
                            <li class="divider"></li>
                            <li><a href="https://my.sagicor.com/myvoluntary"> My Voluntary</a></li>
                            <li class="divider"></li>
                            
                            <li><a href="https://my.sagicorjamaica.com/OnlineRegistration/"> e-bank Registration</a></li>
                            <li class="divider"></li>
                            <li><a href="https://mailjam.sagicor.com/">Team Login</a></li>
                        </ul>
                    </div>
                </div>

            </div>
            <div class="col-sm-9" style="padding-right: 0px!important;float:right">
                <div class="col-sm-10 floatRight" style="text-align:right;margin-top:2%;padding-bottom:1%; color:#09588d; padding-right: 0px;">
<!--Subscribe section-->

    <nav id="subscribe-nav" style="float:right;">
        <ul>
            <li id="cdate">
                Friday, July 13, 2018 | 
            </li> 
        <li id="login">
                                
            <a id="login-trigger" class="btn btn-default btn-xs" href="#">
            <span class="glyphicon glyphicon-envelope"></span> Subscribe
            </a>
            <div id="login-content" style="margin-right: -1px;">
<form action="/Subscribe/Signup" data-ajax="true" data-ajax-method="POST" data-ajax-success="showConfirmation" id="subscribeForm" method="post" target="_self">                    <div class="alert alert-info alert-dismissible" role="alert" style="display:none;" id="subscribeMsg">
                        <span id ="message"></span>
                    </div>
                    <h3>Subscribe</h3>
<input class="inputformat" data-val="true" data-val-required="The fullName field is required." id="fullName" name="fullName" placeholder="Enter your full name" type="text" value="" /><span class="field-validation-valid" data-valmsg-for="fullName" data-valmsg-replace="true"></span>                    <br />
<input class="inputformat" data-val="true" data-val-regex="Please enter a valid email address" data-val-regex-pattern="^[_A-Za-z0-9-\+]+(\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\.[A-Za-z0-9]+)*(\.[A-Za-z]{2,})$" data-val-required="The email field is required." id="email" name="email" placeholder="Your email address" type="email" value="" /><span class="field-validation-valid" data-valmsg-for="email" data-valmsg-replace="true"></span>                    <br />
<select class="form-control" data-val="true" data-val-required="The division field is required." id="division" name="division"><option value="">Please select a division...</option>
<option value="SBJ">Sagicor Bank Jamaica</option>
<option value="SLJ">Sagicor Life Jamaica</option>
<option value="SILJ">Sagicor Investments Jamaica</option>
<option value="SPS">Sagicor Property Service</option>
</select><span class="field-validation-valid" data-valmsg-for="division" data-valmsg-replace="true"></span>                    <br />      
                    <input type="submit" class="btn btn-primary btn-small" id="submit" value="Subscribe">  
</form>            </div>                     
        </li>
        </ul>
    </nav>
 
                </div>
                <div class="floatRight col-sm-10" style="padding-right:0px;">
                    <div class="floatRight">
                        <div class="col-sm-7">
                            <form class="" role="form" method="get" action="/search">

                                <input class="form-control" id="Query" name="Query" placeholder="Search" style="width:200px;display:inline-block;" type="text" value="" />
                            </form>
                        </div>

                        <div class="col-sm-5" style="text-align:right; padding-right:0px;">
                            <a title="Follow Sagicor Jamaica  on Facebook" href="https://www.facebook.com/SagicorJamaica" target="_blank"> <i style="color:#58595d" class="fa fa-facebook-square fa-2x"></i></a>
                            <a title="Follow Sagicor Jamaica on Twitter" href="https://twitter.com/SagicorJa" target="_blank"><i style="color:#58595d" class="fa fa-twitter-square fa-2x"></i></a>
                            <a title="Follow Sagicor Jamaica on Instagram" href="http://instagram.com/sagicorja" target="_blank"><i style="color:#58595d" class="fa fa-instagram fa-2x"></i></a>
                            <a title="Follow Sagicor Jamaica on YouTube" href="https://www.youtube.com/user/SagicorJamaica" target="_blank"><i style="color:#58595d" class="fa fa-youtube-square fa-2x"></i></a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!--Navigation-->
    <div class="navigationContainer">
        <div class="container" style="padding-right: 0px!important;">
            <div class="floatRight col-sm-10" style="padding-right: 0px!important;">
                <div class="layoutContainerBox">
                    <div style="float:right">

    <div class="dropdown masthead-nav btn-group masthead-nav-space">
        <a href="#" class="dropdown-toggle" id="aboutSagicorMenu" data-toggle="dropdown">About Sagicor</a>
        <ul class="dropdown-menu" role="menu" aria-labelledby="aboutBtnMenu">
            <li>
                <div style="width:850px; padding-right:0px; text-align:left;">
                    <div style="width:20%; float:left;border-right:1px solid #f5f1f1;">
                        <ul class="dropdownsub-menu">
                            <li role="presentation" class="dropdown-header"><a role="menuitem" tabindex="-1" href="/aboutsagicor/inside-sagicor">Inside Sagicor</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/aboutsagicor/inside-sagicor/coporate-profile-sagicor-group">Corporate Profile</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/aboutsagicor/inside-sagicor/board-of-directors-sgj">Our Leadership Team</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/aboutsagicor/inside-sagicor/coporate-social-responsibility">Corporate Social Responsibility</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/aboutsagicor/inside-sagicor/sagicor-service-charter">Customer Service Charter</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/aboutsagicor/inside-sagicor/customer-feedback-policy-procedure">Customer Feedback Policy</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/aboutsagicor/inside-sagicor/sagicor-notices">Important Notices</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/aboutsagicor/inside-sagicor/sagicor-in-the-news">In the News</a></li>
                            <!--<li role="presentation"><a role="menuitem" tabindex="-1" href="/aboutsagicor/inside-sagicor/board-of-directors-sgj">Shareholder Information</a></li>-->

                        </ul>

                    </div>

                    <!-- <div style="width:20%; float:left;border-right:1px solid #f5f1f1;" >
                        <ul class="dropdownsub-menu">
                            <li role="presentation" class="dropdown-header"><a role="menuitem" tabindex="-1" href="/aboutsagicor/media-centre">Media Centre</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="#">Press Releases</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="#">In the News</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="#">Media Center Contact Information</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="#">Speeches and Presentations</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="#">Newsletters</a></li>
                        </ul>

                    </div> -->

                    <div style="width:20%; float:left;border-right:1px solid #f5f1f1;">
                        <ul class="dropdownsub-menu">
                            <li role="presentation" class="dropdown-header"><a role="menuitem" tabindex="-1" href="/aboutsagicor/InvestorRelations">Investor Relations</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/aboutsagicor/investor-relations/financials">Financials</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/aboutsagicor/investor-relations/governance-code-and-ethics">Governance and Code of Ethics</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="1" href="/Forms/Investments/XFund-CorporateGovernancePolicy2018.pdf">X Fund - Corporate Goverance Policy</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/aboutsagicor/inside-sagicor/notices">Legal Notices</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/aboutsagicor/inside-sagicor/contact-legal-team">Contact our Legal Team</a></li>
                            
                        </ul>

                    </div>

                    <div style="width:20%; float:left;border-right:1px solid #f5f1f1;">
                        <ul class="dropdownsub-menu">
                            <li role="presentation" class="dropdown-header">Related Companies</li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="http://www.sagicor.com">Sagicor Financial Corporation</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/aboutsagicor/related-companies/insurance-brokers">Sagicor Insurance Brokers</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="http://www.sagicorcayman.com">Sagicor Life of the Cayman</a></li>
                            
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/Real-Estate">Sagicor Property Services</a></li>
                            
                        </ul>
                    </div>

                    <div style="width: 20%; float: left; border-right: 1px solid #f5f1f1;">
                        <ul class="dropdownsub-menu">
                            <li role="presentation" class="dropdown-header"><a role="menuitem" tabindex="-1" href="/aboutsagicor/careers">Careers</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/aboutsagicor/careers">Why Sagicor</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/aboutsagicor/careers/life-at-sagicor">Life at Sagicor</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="https://career4.successfactors.com/career?company=sagicor">Search For and View Available Jobs</a></li>

                        </ul>

                    </div>
                    <div style="width:20%; float:left;">
                        <ul class="dropdownsub-menu">
                            <li role="presentation" class="dropdown-header">Terms and Conditions</li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Merchant-Acquirer-Terms-and-Conditions-Feb-2016.pdf" target="_blank">Merchant Acquirer</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Sagicor-FATCA-Terms-and-Condtions-May-2016.pdf" target="_blank">FATCA</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/SBJ-Cash-Secured-Loan-Agreement-Nov-2016.pdf" target="_blank">Cash Secured Loan</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/SBJ-Certificate-of-Deposit-Terms-and-Conditions-July-2017.pdf" target="_blank">Certificate of Deposit</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/SBJ-Credit-Card-Terms-and-Condtions-Aug-2017.pdf" target="_blank">Credit Card</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/SBJ-Facility-Agreement-2015.pdf" target="_blank">Facility Agreement</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/SBJ-General-Terms-and-Conditions-May-2015.pdf" target="_blank">General Terms and Conditions for Client</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/SBJ-Night-Day-Depository-Services-Agreement-Aug-2017.pdf" target="_blank">Night Day Depository Services</a></li>
                        </ul>
                    </div>
                </div>
            </li>

        </ul>
    </div>

    <div class="dropdown masthead-nav btn-group ">
        <a href="#" class="dropdown-toggle" id="personalBtnMenu" data-toggle="dropdown">Personal</a>
        <ul class="dropdown-menu" role="menu" aria-labelledby="personalBtnMenu">

            <li>
                <div style="width:100%; padding-right:0px;">
                    <div style="width:160px; float:left;border-right:1px solid #f5f1f1;">
                        <ul class="dropdownsub-menu">
                            <li role="presentation" class="dropdown-header"><a role="menuitem" tabindex="-1" href="/personal/Banking">Banking</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/banking/savings-account">Savings Account</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/banking/chequing-account">Chequing Account</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/banking/credit-facilities/loans">Loans</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/banking/credit-cards">Credit Cards</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/banking/credit-cards/rewards">Credit Card Rewards</a></li> 
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/banking/fx-access">Foreign Exchange (FX) Access</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/banking/investment-solutions">Investment Solutions</a></li>                            
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/banking/repossessed-assets">Repossessed Assets</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/banking/ways-to-bank">Ways to Bank</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Banking/Products Rate Guide.pdf">Current Fee guide</a></li>
                            
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Banking/Deposit-Products-Rate-Guide-Final2.pdf">Fee guide: Upcoming changes</a></li>
                            -----------------------------------------
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/Banking">More Products & Services</a></li>




                            
                           
                           
                        </ul>
                    </div>

                    <div style="width:160px; float:left;border-right:1px solid #f5f1f1;">
                        <ul class="dropdownsub-menu">
                            <li role="presentation" class="dropdown-header"><a role="menuitem" tabindex="-1" href="/personal/investments">Investments</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/investments/sigma-funds">Sigma Global Funds</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/investments/sigma-educator-plan">Sigma Educator Plan</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/investments/stock-brokerage">Stock Brokerage</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/investments/sima">SIMA</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/investments/portfolio-advisory">Portfolio Advisory</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/investments/securities-trading">Securities Trading</a></li>                           
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/investments/jse-onlinetrading">JSE Online Trading</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/investments/repos">Repurchase Agreements</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/find-advisor">Find An Advisor</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Investments/18-SIJ-366-SIJ-Digital-fee-Guide-Artwork-Jan-2018.pdf">SIJ Fee Guide</a></li>
                                ----------------------------------------
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/investments">More Products & Services</a></li>
                                                        
                             
                            
                            
                                                              
      
                            

                           
                            
                            
                            
                            
                        </ul>

                    </div>

                    <div style="width:160px; float:left;border-right:1px solid #f5f1f1;">
                        <ul class="dropdownsub-menu">
                            <li role="presentation" class="dropdown-header"><a role="menuitem" tabindex="-1" href="/personal/Insurance">Insurance</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/insurance/health/individual-health">Individual Health</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/insurance/individual-life">Individual Life</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/insurance/govt-sponsored-schemes-and-plans">Government Schemes & Health Plan</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/insurance/health/supplemental-benefits">Supplemental Benefits</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/insurance/group-health">Group Health</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/insurance/individual-life/sagicor-insurance-brokers">Sagicor Insurance Brokers</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/find-agent">Find An Agent</a></li>

                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/calculators">Tools and Resources</a></li>
                            <!--<li role="presentation"><a role="menuitem" tabindex="-1" href="#">Ways to Pay</a></li>-->
                        </ul>

                    </div>

                    <div style="width:160px; float:left;border-right:1px solid #f5f1f1;">
                        <ul class="dropdownsub-menu">
                            <li role="presentation" class="dropdown-header"><a role="menuitem" tabindex="-1" href="/personal/Pension">Pension</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/pension/pension-fund-performance-statistics">Pension Fund Performance Statistics</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/pension/retirement-planning">Retirement Planning</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/pension/individual-pension-arrangements">Individual Pension Arrangements</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/calculators">Tools and Resources</a></li>
                        </ul>

                    </div>

                    <div style="width:130px; float:left;border-right:1px solid #f5f1f1;">
                        <ul class="dropdownsub-menu">

                            <li role="presentation" class="dropdown-header"><a role="menuitem" tabindex="-1" href="/personal/Mortgage">Mortgage</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/mortgage/sagicor-life-residential-mortgage">Sagicor Life Residential Mortgage</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/mortgage/sagicor-bank-residential-mortgage">Sagicor Bank Residential Mortgage</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/mortgage/construction-mortgage">Construction Mortgage</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/mortgage/homepurchase-mortgage">Home Purchase Mortgage</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/calculators">Tools and Resources</a></li>
                        </ul>

                    </div>

                    <div style="width:135px; float:left;">
                        <ul class="dropdownsub-menu">
                            <li role="presentation" class="dropdown-header"><a role="menuitem" tabindex="-1" href="/personal/Real-Estate">Real Estate</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/Real-Estate">Sagicor Property Services</a></li>
                        </ul>

                    </div>

                </div>
            </li>

        </ul>
    </div>

    <div class="dropdown masthead-nav btn-group masthead-nav-space ">
        <a href="#" class="dropdown-toggle" id="businessBtnMenu" data-toggle="dropdown">Business</a>
        <ul class="dropdown-menu" role="menu" aria-labelledby="businessBtnMenu">

            <li>
                <div style="width:850px; padding-right:0px;">
                    <div style="width:130px; float:left;border-right:1px solid #f5f1f1;">
                        <ul class="dropdownsub-menu">
                            <li role="presentation" class="dropdown-header"><a role="menuitem" tabindex="-1" href="/business/banking">Banking</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/banking/savings-account">Savings Account</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/banking/chequing-account">Chequing Account</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/banking/credit-and-loans">Credit and Loans</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/banking/term-account">Term Account</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/banking/call-account">Call Account</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/banking/smebanking">SME Business Banking</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/banking/sme-usd-line">SME USD-Line</a></li>                            
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/banking/credit-cards">Credit Cards</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/banking/pos/point-of-sale">Point of Sale</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/personal/Swype">Swype</a></li>
                        </ul>

                    </div>

                    <div style="width:160px; float:left;border-right:1px solid #f5f1f1;">
                        <ul class="dropdownsub-menu">
                            <li role="presentation" class="dropdown-header"><a role="menuitem" tabindex="-1" href="/business/investments">Investments</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/investments/sigma-funds">Sigma Global Funds</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/investments/portfolio-advisory">Portfolio Advisory</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/investments/stock-brokerage">Stockbrokerage Services</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/investments/sima">SIMA</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/investments/ipo">Initial Public Offerings</a></li>                            
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/investments/corporate-financing-service">Corporate Financing Service</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/investments/repos">Repurchase Agreements</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/find-advisor">Find An Advisor</a></li>
                                --------------------------------------
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/investments">More Products & Services</a></li>
                            

                              
                            
                          
                              
                            
                            

                        </ul>

                    </div>

                    <div style="width:160px; float:left;border-right:1px solid #f5f1f1;">
                        <ul class="dropdownsub-menu">
                            <li role="presentation" class="dropdown-header"><a role="menuitem" tabindex="-1" href="/business/insurance">Insurance</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/insurance/group-life">Group Life</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/insurance/group-health">Group Health</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/insurance/provider-services">Provider Services</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/insurance/govt-sponsored-schemes-and-plans">Government Schemes & Health Plan</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/insurance/supplemental-benefits">Supplemental Benefits</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/insurance/ways-to-pay">Ways to Pay</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/find-agent">Find An Advisor</a></li>
                        </ul>

                    </div>

                    <div style="width:160px; float:left;border-right:1px solid #f5f1f1;">
                        <ul class="dropdownsub-menu">
                            <li role="presentation" class="dropdown-header"><a role="menuitem" tabindex="-1" href="/business/pension">Pension</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/pension/pension-fund-performance-statistics">Pension Fund Performance Statistics</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/pension/employee-sponsored-plans">Employer Sponsored Plans</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/pension/individual-pension-arrangements">Individual Pension Arrangements</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/pension/already-a-pensioner">Already a Pensioner</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/pension/pension-services">Pension Services</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="https://my.sagicor.com/topas/selection_index.html">My Sagicor</a></li>



                        </ul>

                    </div>

                    <div style="width:120px; float:left;border-right:1px solid #f5f1f1;">
                        <ul class="dropdownsub-menu">
                            <li role="presentation" class="dropdown-header"><a role="menuitem" tabindex="-1" href="/business/mortgage">Mortgage</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/mortgage/commercial">Commercial Mortgage</a></li>
                        </ul>

                    </div>

                    <div style="width:120px; float:left;">
                        <ul class="dropdownsub-menu">
                            <li role="presentation" class="dropdown-header"><a role="menuitem" tabindex="-1" href="/business/real-estate">Real Estate</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/business/Real-Estate">Sagicor Property Services</a></li>
                        </ul>

                    </div>

                </div>
            </li>

        </ul>
    </div>



    <div class="dropdown masthead-nav btn-group masthead-nav-space">
        <a href="/foundation">Sagicor Foundation</a>
        <!-- <div style="width:1000px; padding-right:0px; text-align:left;">
            <div style="width:230px; float:left; text-align:left;">
                <ul class="dropdownsub-menu">
                    <li role="presentation"><a role="menuitem" tabindex="-1" href="/foundation">Sagicor Foundation</a></li>
                </ul>
            </div>
        </div> -->
    </div>

    <div class="dropdown masthead-nav btn-group masthead-nav-space">
        <a href="https://sagicorsigmarun.com" class="dropdown-toggle" target="_blank">Sigma Run</a>

        
        

    </div>

    <div class="dropdown masthead-nav btn-group masthead-nav-space ">
        <a href="#" class="dropdown-toggle" id="formsBtnMenu" data-toggle="dropdown">Forms</a>
        <ul class="dropdown-menu" role="menu" aria-labelledby="formsBtnMenu">
            <li>
                <div style="width:1500px; padding-right:15px;">
                    <div style="width:180px; float:left;border-right:1px solid #f5f1f1;">
                        <ul class="dropdownsub-menu">
                            <li role="presentation" class="dropdown-header">Banking</li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Banking/Loan-Application-Condensed-Edited.pdf" target="_blank">Personal Loan Application</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Banking/Account_Opening_Business.pdf" target="_blank">Account Opening (Business)</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Banking/Account_Opening_Individual-2016-2017.pdf" target="_blank">Account Opening (Individual)</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Banking/Client_Information_Form_Business_eForm.pdf" target="_blank">Customer Information Form (Business)</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Banking/Client_Information_Form_Individual-2016-2017.pdf" target="_blank">Customer Information Form (Individual)</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Banking/e-Bank-Application-Individual-EBAB07-2015.pdf" target="_blank">Request Personal eBanking</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Banking/e-Bank-Application-Business-EBAB08-2015.pdf" target="_blank">Request Business eBanking</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Banking/Electronic-Instructions-Authorization-and-Indemnity-EIAI05-2016.pdf" target="_blank">Electronic Instructions Authorization and Indemnity</a></li>
                            <!--<li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Banking/Account_Open_Form SBJL.pdf" target="_blank">Individual Financial Statement</a></li>-->
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Banking/Wire-Transfer-Request-WTR06-2016.pdf" target="_blank">Request for Wire Transfer</a></li>                            
                            <!--<li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Banking/Account_Open_Form SBJL.pdf" target="_blank">Business E-Banking</a></li>-->
                            
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Banking/SagicorBank_LoanApplication.pdf" target="_blank">Loan Application</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Banking/17-SCC-451-Sagicor-Bank-Additional-Cardholder-Form.pdf" target="_blank">Additional Credit Cardholder</a></li>
                        </ul>
                    </div>

                    <div style="width:250px; float:left;border-right:1px solid #f5f1f1;">
                        <ul class="dropdownsub-menu">
                            <li role="presentation" class="dropdown-header">Insurance</li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Insurance/Fund_Allocation_Transfer_Form.pdf" target="_blank">Fund Allocation Transfer</a></li>
                            
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Insurance/Proof_of_Death.pdf" target="_blank">Proof of Death - Physician's Statement</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Insurance/Confidential_Medical_Certificate.pdf" target="_blank">Confidential Medical Certificate</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Insurance/Critical_Illness_ClaimForm.pdf" target="_blank">Critical Illness Claim Form</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Insurance/Declaration_for_appointment_or_change_of_beneficiary.pdf" target="_blank">Change of Beneficiary</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Insurance/Declaration_Concerning_Name.pdf" target="_blank">Name Change</a></li>
                            <!--<li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Insurance/SagicorBank_LoanApplication.pdf" target="_blank">Change of Premium Frequency</a></li>-->
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Insurance/DECLARATION_FOR_APPOINTMENT_OR_REMOVAL_OFTRUSTEE.pdf" target="_blank">Change of Trustee</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Insurance/Deduction of additional premium - PAP form.pdf" target="_blank">Deduction of Additional Premium - PAP Form</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Insurance/Pre-Authorized Payment Cancellation Form.pdf" target="_blank">Pre-Authorized Payment Cancellation Form</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Insurance/Pre-Authorized Payment Form.pdf" target="_blank">Pre-Authorized Payment Form</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Insurance/Surrender and Cancellation Form.pdf" target="_blank">Surrender and Cancellation Form</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Insurance/POLICY_CHANGE_FORM.pdf" target="_blank">Policy Change Form</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Insurance/New_Disbursement_Form.pdf" target="_blank">Policy Disbursement Form</a></li>


                        </ul>
                    </div>

                    <div style="width:250px; float:left;border-right:1px solid #f5f1f1;">
                        <ul class="dropdownsub-menu">
                            <li role="presentation" class="dropdown-header">Investments</li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Investments/Account-Openng-SIJL-Business-eForm.pdf" target="_blank">Account Opening (Business)</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Investments/Account-Openng-SIJL-Individual-eForm.pdf" target="_blank">Account Opening (Individual)</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Investments/CIF-Business.pdf" target="_blank">Customer Information Form (Business)</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Investments/CIF-Individual.pdf" target="_blank">Customer Information Form (Individual)</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Investments/Electronic-Instructions-Authorization-and-Indemnity-EIAI05-2016.pdf" target="_blank">Electronic Instructions Authorization and Indemnity</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Investments/Account_Mandate_SIJ_indiv.pdf" target="_blank">Account Mandate</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Investments/Sagicor_Specimen_Signature_Personal.pdf" target="_blank">Specimen Signature</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Investments/Sagicor_SigmaforLegacy Sagicor Bank_Fillable Cert.pdf" target="_blank">Gift Certificate</a></li>
                            
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Investments/SIJL_SBJL_FaxEmailindemnity.pdf" target="_blank">Indemnity Form</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Investments/Sagicor_Sigma_Character_Reference_Form.pdf" target="_blank"> Sigma Character Reference</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Investments/e-bank-Application-SIJL-eform-EBASI07-2015.pdf" target="_blank">Individual E-Banking</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Investments/e-bank-Application-SIJL-eform-EBASI07-2015.pdf" target="_blank">Business E-Banking</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Investments/SIJL_Sigma_Salary_Deduction_Fillable_Enabled.pdf" target="_blank">Salary Deduction</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Investments/Sigma_Funds_Subscription_Redemption_Forms.pdf" target="_blank">Sigma Subscription Redemption</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Investments/Sagicor_Offering_Circular_November_2018.pdf" target="_blank">Sagicor Sigma Global Funds Offering Circular</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Investments/Wire-Transfer-Form-eform-SIJL.pdf" target="_blank">Wire Transfer Form</a></li>
                        </ul>
                    </div>
                    <div style="width:230px; float:left;border-right:1px solid #f5f1f1;">
                        <ul class="dropdownsub-menu">
                            <li role="presentation" class="dropdown-header">Pensions</li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Pension/Appointment_of Beneficiary_for Pensioners.pdf" target="_blank">Appointment of Beneficary</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Pension/APPOINTMENT_OF_TRUSTEE_FORM_FOR_ SPONSOR.doc" target="_blank">Appointment Of Trustee</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Pension/Contact_details_for Beneficiaries_of_Active_members.pdf" target="_blank">Contact Details of Beneficiaries</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Pension/Contact_Details_for_Deferred_Members_EBA.pdf" target="_blank"> Contact Details of Deferred Members</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Pension/Contact_Details_for_Deffered_Vested_Members.pdf" target="_blank">Contact Details of Deferred Vested Members</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Pension/Contact_Details_for_Pensioners_EBA.pdf" target="_blank">Contact Details of Pensioners</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Pension/Financial_Institution_Request_Form.pdf" target="_blank">Financial Institution Request</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Pension/Notice_of_Death_EBA.pdf" target="_blank">Notice Of Death</a></li>
                            <li role="presentation"><a role="menuitem" tabindex="-1" href="/Forms/Pension/New_Enrollment_Form2014.docx" target="_blank">New Enrolment Form</a></li>
                        </ul>
                    </div>
            
                </div>
            </li>
        </ul>

    </div>

</div> 
                </div>
            </div>
        </div>
    </div>

    <!--Content Area-->
    <div style="width:100%; min-width:1200px; background-color:#bcdae8; padding-top:40px;">
        <div class="vspace"></div>

        <div class="container boxshadow" id="parentContainer" style="background-color:#fff; padding-top:20px;padding-left:0px; padding-right:0px; ">


            <div class="col-sm-12">
                <!--Secondary Navigation-->
<div class="col-sm-2" style="padding-left:0px; padding-right:0px;">
    <div id="nestedAccordion">

       <h2 id="DefaultBanking"><a href="/personal/banking"> Banking</a></h2>

	    <div>

		  <h3 id="BankingSavings"><a href="/personal/banking/savings-account">Savings Accounts</a> </h3>
            <div>
                <ol>
                    <li><a href="/personal/banking/savings-account/sbj-savings-campaign">SBJ Savings Account Campaign</a></li>
                    <li><a href="/personal/banking/savings-account/a-account">A Account</a></li>
                    <li><a href="/personal/banking/savings-account/advantage-savings">Advantage Savings</a></li>
                    <li><a href="/personal/banking/savings-account/prime-savings">Prime Savings</a></li> 
                    <li><a href="/personal/banking/savings-account/eadvantage">eAdvantage</a></li>
                    <li><a href="/personal/banking/savings-account/advantage-senior">Advantage Senior</a></li>
                  
                </ol>
            </div> 
        
          <h3  id="BankingChequing"><a href="/personal/banking/chequing-account">Chequing Accounts</a></h3>
            <div>
                <ol>
                    
                    <li><a href="/personal/banking/chequing-account/prime-chequing">Prime Chequing</a></li> 
                </ol>
            </div>

          <h3 id="BankingCreditFacilities"><a href="/personal/banking/credit-facilities/loans">Loans</a></h3>
            <div>
                <ol>
                    
                                       
                                        
                    
                    
                    
                    
                    
                    
                    
                    
                    <li><a href="/personal/banking/credit-facilities/international-womens-day-offer">International Women Day Offer</a></li>
                    <li><a href="/promos/xmasloan">Sagicor Bank Christmas Loan</a></li>
                    <li><a href="/personal/banking/credit-facilities/back-to-school-loan">Back to School Loan</a></li>
                    <li><a href="/personal/banking/credit-facilities/sagicor-advance-loan">Sagicor Advance Loan</a></li>
                    <li><a href="/personal/banking/credit-facilities/pos-merchant-loan">POS Merchant Loan</a></li>
                    <li><a href="/personal/banking/credit-facilities/unsecured-loans">Unsecured Loan</a></li>
                    <li><a href="/personal/banking/credit-facilities/toyota-finance">Toyota Finance</a></li>
                    <li><a href="/personal/banking/credit-facilities/new-auto-loan">New Auto Loan</a></li>
                    <li><a href="/personal/banking/credit-facilities/used-auto-loan">Used Auto Loan</a></li>
                    <li><a href="/personal/banking/credit-facilities/debt-consolidation">Debt Consolidation</a></li>
                    <li><a href="/personal/banking/credit-facilities/cash-secured-loans">Cash Secured Loan</a></li>   
                                    
                    <li><a href="/personal/banking/credit-facilities/home-equity">Home Equity Loan</a></li>
                    <li><a href="/personal/banking/credit-facilities/mortgage">Mortgage</a></li>            
                    <li><a href="/personal/banking/credit-facilities/jdf-unsecured-loan">JDF Unsecured Loan</a></li>
                    <li><a href="/personal/banking/credit-facilities/regional-health-authority-unsecured-loan">RHA Unsecured Loan</a></li>
                    
                    
                    
                </ol>
            </div>

            <h3 id="BankingCreditCards"><a href="/personal/banking/credit-cards" >Credit Cards</a></h3>
            <div>
                <ol>
                    <li><a href="/personal/banking/credit-cards/get-started">Get Started</a></li>
                    <li><a href="/personal/banking/credit-cards/compare-cards">Compare Cards</a></li>
                    <li><a href="/personal/banking/credit-cards/mastercard-standard">Mastercard Standard</a></li>
                    <li><a href="/personal/banking/credit-cards/mastercard-gold">Mastercard Gold</a></li>
                    <li><a href="/personal/banking/credit-cards/mastercard-platinum">Mastercard Platinum</a></li>
                  
                    
                    <li><a href="/personal/banking/credit-cards/rewards">Credit Card Rewards</a></li> 
                     <li><a href="/Forms/Banking/18-SCC-604 Credit Cared Fee Guide Updated-01.pdf">Mastercard Fee Guide</a></li>
                    <li><a href="/Forms/Banking/18-SCC-604 Credit Cared Fee Guide Updated-02.pdf">Visa Fee Guide</a></li>
                        
                    <li><a href="/Forms/Banking/Credit-Card-Terms-Condtions-LEGAL-FINAL.pdf">Credit Card Terms and Conditions</a></li> 
                    <li><a href="/Forms/Sagicor-Bank-Credit-Card-Rewards-Terms-and-Conditions_FINAL.PDF">Credit Card Rewards Terms and Conditions</a></li>            
                    
                </ol>
            </div>

            <h3 id="BankingInvestmentSolutions"><a href="/personal/banking/investment-solutions"> Investment Solutions</a></h3>
            <div>
                <ol>
                    <li><a href="/personal/banking/investment-solutions/investment/local-certificates-of-deposits">Local Certificates of Deposits</a></li>
                    <!-- <li><a href="/personal/banking/investment-solutions/local-unbreakable-term-deposits">Unbreakable Term Deposit</a></li> -->
                    <li><a href="/personal/banking/investment-solutions/investment/foreign-currency-certificates-of-deposit">Foreign Currency CD</a></li>
                    <li><a href="/personal/banking/investment-solutions/investment/sbj-certificate-of-deposit">Certificate Deposit</a></li>
                    <li><a href="/personal/banking/investment-solutions/foreign-currency-premium-earner-term-deposit-account">Foreign Currency Premium</a></li>
                    <li><a href="/personal/banking/investment-solutions/sbj-forex-certificate-of-deposit">Legacy Foreign Currency CD</a></li>
                    <li><a href="/personal/banking/investment-solutions/investment/sbj-forex-investment">Foreign Currency 'A' Account</a></li>
                    <li><a href="/personal/banking/investment-solutions/foreign-currency-savings-account">Foreign Currency Savings Account</a></li>
                </ol>
            </div>


          <h3 id="FxAccess"><a href="/personal/banking/fx-access"> Foreign Exchange Access</a></h3>
           
             
            <h3 id="WaysToBank"><a href="/personal/banking/ways-to-bank">Ways to Bank</a></h3> 
            <h3 id="BankingSwitchKit"><a href="/personal/banking/switch-kit">Switch Kit</a></h3>
            <h3 id="ProductSvcFeeGuide"><a href="/Forms/Banking/Interest-Rates-on-Deposit-Accounts.pdf">Interest Rates on deposit Accounts </a></h3>
            <h3 id="ProductSvcFeeGuideUpdated"><a href="/Forms/Banking/Fee Guide Editable - Effective August 2 2018.pdf">Fee Guide</a></h3>
            <h3 id="BankTermsCond"><a href="/Forms/Banking/New_Sagicor_Bank_Account_Terms__Conditions_Final.PDF">Terms and Conditions</a></h3> 
            <h3 id="CodeOfConduct"><a href="/Forms/Banking/code_of_conduct_on_customer_related_matters.pdf">Code of Conduct on Customer Related Matters</a></h3>           
            
        </div>
        <!--Insurance-->
        <h2 id="DefaultInsurance"><a href="/personal/insurance">Insurance</a></h2> 
        <div>
            <h3 id="InsuranceIndividualLife"><a href="/personal/insurance/individual-life">Individual Life</a></h3>
            <div>
                <ol>
                    
                    <li><a href="/personal/insurance/individual-life/protector-series/life-protector">Life Protector</a></li>
                    <li><a href="/personal/insurance/individual-life/total-woman">Total Woman</a></li>
                    <li><a href="/personal/insurance/individual-life/protector-series/maximum-protector">Maximum Protector</a></li> 
                    <li><a href="/personal/insurance/individual-life/protector-series/critical-illness-protector">Critical Illness Protector</a></li>
                    <li><a href="/personal/insurance/individual-life/purple-shield">Purple Shield</a></li>
                    <li><a href="/personal/insurance/individual-life/triple-protector-plus">Triple Protector Plus</a></li>
                    <li><a href="/personal/insurance/individual-life/cancer-plus">Cancer Plus</a></li>
                    
                    <li><a href="/personal/insurance/individual-life/ultra-life">Ultra Life</a></li>
                    <li><a href="/personal/insurance/individual-life/personal-accident">Personal Accident</a></li>
                    <li><a href="/personal/insurance/individual-life/super-term">Super Term</a></li>
                    
                    <li><a href="/personal/insurance/individual-life/voluntary-benefits/dependent-life">Dependent Life</a></li>
                    <li><a href="/personal/insurance/individual-life/voluntary-benefits/critical-illiness">Critical Illness</a></li>
                    <li><a href="/personal/insurance/individual-life/term-life">Term Life</a></li> 



                   
                    <li><a href="/personal/insurance/individual-life/voluntary-benefits/supplemental-life">Supplemental Life</a></li>
                    
                    <li><a href="/personal/insurance/individual-life/investment">Investment</a></li>
                    <li role="presentation"><a role="menuitem" tabindex="-1" href="/find-agent">Find an Agent</a></li>  
                </ol>
            </div>
            <h3 id="InsuranceHealth"><a href="/personal/insurance/health">Health</a></h3>
            <div>
                <ol>
                    <li><a href="/personal/insurance/health/indivdual-health/executive-health-plus">Executive Health Plus</a></li>
                    <li><a href="/personal/insurance/health/indivdual-health/executive-health">Executive Health</a></li>
                    <li><a href="/personal/insurance/health/indivdual-health/shore-plus">Shore Plus</a></li>
                    <li><a href="/personal/insurance/health/indivdual-health/supreme-health">Supreme Health</a></li>
                    <li><a href="/personal/insurance/health/supplemental-benefits">Supplemental Benefits</a></li>
                    <li><a href="/personal/insurance/health/fast-cards">Fast Card</a></li>
                </ol>
            </div>
            <h3 id="InsuranceGroupHealth"><a href="/personal/insurance/group-health">Group Health</a></h3>
            <h3 id="InsuranceSagicorInsuranceBroker"><a href="/personal/insurance/individual-life/sagicor-insurance-brokers">Sagicor Insurance Brokers</a></h3>
            
            <h3 id="InsuranceGovtSchemes"><a href="/personal/insurance/govt-sponsored-schemes-and-plans"> Government Sponsored Schemes</a></h3>
            <div>
                <ol>
                    <li><a href="/personal/insurance/govt-sponsored-schemes/geaso">GEASO</a></li>
                    <li><a href="/personal/insurance/govt-sponsored-schemes/gpaso">GPASO</a></li>
                    <li><a href="/personal/insurance/govt-sponsored-schemes/ni-gold">NI Gold</a></li>
                    <li><a href="/personal/insurance/govt-sponsored-schemes/psmo">PSMO</a></li>
                    <li><a href="/personal/insurance/govt-sponsored-schemes/sge">SGE</a></li>
                    <li><a href="/personal/insurance/govt-sponsored-schemes/general-info">General Information</a></li>
    
                </ol>
            </div>
            <h3 id="Index"><a href="/find-agent">Find An Agent</a></h3>
        </div>
        <!--Investment-->
        <h2 id="DefaultInvestment"><a href="/personal/investments">Investments</a></h2>
        <div>
            <h3 id="Investments">Products</h3>
            <div>
                <ol>
                    <li id="SigmaFunds"><a href="/personal/investments/sigma-funds">Sigma Global Funds</a></li>
                    <li id="SigmaEducator"><a href="/personal/investments/sigma-educator-plan">Sigma Educator Plan</a></li>
                    <li id="FundPerformanceStatistics"><a href="/personal/investments/fund-performance-statistics">Fund Performance & Statistics</a></li>
                    
                    <li id="Sima"><a href="/personal/investments/sima">SIMA</a></li>
                    <li id="OnlineTrading"><a href="/personal/investments/jse-onlinetrading">JSE Online Trading</a></li>
                    <li id="StockBrokerage"><a href="/personal/investments/stock-brokerage">Stock Brokerage</a></li>
                    <li id="SecuritiesTrading"><a href="/personal/investments/securities-trading">Security Trading Services</a></li>
                    <li id="PortfolioAdvisory"><a href="/personal/investments/portfolio-advisory">Portfolio Advisory</a></li>
                    <li id="CustodySafeKeeping"><a href="/personal/investments/custody-safe-keeping">Custody Safe Keeping</a></li>
                    
                    <li id="RepurchaseAgreements"><a href="/personal/investments/repos">Repurchase Agreemennts</a></li>
                    
                    <li id="CIMutualFunds"><a href="/personal/investments/ci-mutual-funds">CI Mutual Funds</a></li>
                    <li id="GiftCertificate"><a href="/personal/investments/gift-certificate">Gift Certificate</a></li>
                    
                    <li id="USBonds"><a href="/personal/investments/us-bonds">US$ Bonds</a></li>
                    <li id="StockBrokerage"><a href="/Forms/Investments/SCI-Prospectus-2018-04-24.pdf">View the newest Prospectus’ for investment opportunities here</a></li>
                    
                </ol>
            </div>
            <h3 id="InvestTermsAndCond"><a href="/Forms/Investments/Terms_Conditions_SIJL_October_2015.pdf">Terms and Conditions</a></h3>           
            <h3 id="ProductInvSvcFeeGuide"><a href="/Forms/Investments/18-SIJ-366-SIJ-Digital-fee-Guide-Artwork-Jan-2018.pdf">Product and Service Fee Guide</a></h3>
            <h3 id="FindAdvisor"><a href="/find-advisor">Find An Advisor</a></h3>
        </div>
        
        <h2 id="DefaultPension"><a href="/personal/pension">Pension</a></h2>
        <div>
            <h3 id="Pension">Products</h3>
            <div>
                <ol>
                    <li><a href="/personal/pension/retirement-planning">Retirement Planning</a></li>
                    <li><a href="/personal/pension/individual-pension-arrangements">Individual Pension Arrangements</a></li>
                </ol>
            </div>
        </div>

        <h2 id="DefaultMortgage"><a href="/personal/mortgage">Mortgage</a></h2>
        <div>
            <h3 id="Mortgage">Products</h3>
            <div>
                <ol>
                    <li><a href="/personal/mortgage/sagicor-life-residential-mortgage">Sagicor Life Residential Mortgage</a></li>
                    <li><a href="/personal/mortgage/sagicor-bank-residential-mortgage">Sagicor Bank Residential Mortgage</a></li>
                    <li><a href="/personal/mortgage/construction-mortgage">Construction Mortgage</a></li>
                    <li><a href="/personal/mortgage/homepurchase-mortgage">Home Purchase Mortgage</a></li>
                </ol>
            </div>

        </div>

        <h2 id="DefaultRealEstate"><a href="/personal/real-estate">Real Estate</a></h2>

    </div>
</div>
                <!--Content Placeholer-->
                <div id="primary-content-placeholder" class="col-sm-7">
                    <div class="layoutContainerBox">
                        <div id="printshare" class="col-sm-2" style="padding-bottom:10px;float:right; padding:0 !important">
                            <div>
                                <button type="button" id="printBtn" onclick="printDiv('primary-content-placeholder')" class="btn btn-default btn-md">
                                    <span class="glyphicon glyphicon-print"></span> Print
                                </button>
                              

                                <span class="socialShare"></span>
                            </div>
                        </div>
                        <br />
                        <div class="col-sm-12 marginLeftZero">
                            <div class="breadcrumb-container">

        <a href="/" title="Home">Home</a>
         &gt; 

    Personal
         &gt; 

        <a href="/personal/banking" title="Banking">Banking</a>
         &gt; 

    Fx Access
</div>
                        </div>

                        

<div>
    <br />
    <h2>Fx Access</h2>

    <p>Use our Foreign Exchange Facility (FX) to manage all of your FX transactions right here. We’re ready to make you a citizen of the world by giving you access to over 40 different currencies with:</p>
    <ul>
        <li>Internationally competitive rates</li>
        <li>Same-day delivery of funds</li>
        <li>Foreign currency Remote draft services</li>
        <li>Funds transfer in local and foreign currency</li>
    </ul>
    <p>Sending a foreign currency draft wherever you’d like is just one of the services that we offer!</p>

        <table class="table table-condensed table-hover">
        <thead>
            <tr>
                <td><h4>Currency</h4></td>
                <td class="text-right"><h4>Buy Cash</h4></td>
                <td class="text-right"><h4>Buy Draft</h4></td>
                <td class="text-right"><h4>Sell Cash</h4></td>
                <td class="text-right"><h4>Sell Draft</h4></td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td class="text-nowrap text-left">USD</td>
                <td class="text-right">114.50</td>
                <td class="text-right">126.50</td>
                <td class="text-right">131.80</td>
                <td class="text-right">131.80</td>
            </tr>
            <tr>
                <td class="text-nowrap text-left">CAD</td>
                <td class="text-right">94.50</td>
                <td class="text-right">96.50</td>
                <td class="text-right">101.50</td>
                <td class="text-right">101.50</td>
            </tr>
            <tr>
                <td class="text-nowrap text-left">GBP</td>
                <td class="text-right">169.00</td>
                <td class="text-right">171.00</td>
                <td class="text-right">176.00</td>
                <td class="text-right">176.00</td>
            </tr>
            <tr>
                <td class="text-nowrap text-left">EUR</td>
                <td class="text-right">147.50</td>
                <td class="text-right">149.50</td>
                <td class="text-right">155.50</td>
                <td class="text-right">155.50</td>
            </tr>
        </tbody>
    </table>
        <p><span class="text-primary">Last Updated Date:</span> <span class="text-muted">Thursday, July 12, 2018</span></p>

</div>
                    </div>

                </div>

                <!--Right Panel Info -->
                <div id="right-panel-info" class="col-sm-3 minPanelWidth" style="padding:0px;">

                    <div class="panelContactContainer" style="padding-top:5px; padding-bottom:0px; margin:0px; width:100%;">
                        <div class="marginAddLeft" style="width:100%">
                            <b><span class="title" style="font-size:16px"> Contact Us</span></b>  <br />
                            <span style="font-size:14px;"> We want to hear from you</span>

                        </div>

                        <div style="width:100%; background-color:#49993d ; padding:5px 0px 5px 0px; margin-bottom:2px;">
                            <div class="marginAddLeft">
                                <a href="mailto:infoja@sagicor.com"> <i class="fa fa-envelope"></i> Email</a>
                            </div>
                        </div>

                        <div style="width:100%; background-color:#49993d;  padding:5px 0px 5px 0px;margin-bottom:2px;">
                            <div class="marginAddLeft">
                                <a id="requestCall" class="iframe" href="/Mail/RequestCall"><i class="fa fa-phone"></i> Request a Call</a>
                            </div>
                        </div>

                        <div style="width:100%; background-color:#49993d ; padding:5px 0px 5px 0px; margin-bottom:2px;">
                            <div class="marginAddLeft" style="cursor:pointer" onclick="try{lswin('sid=25917','25917'); return false;} catch(l2se) { }">
                                <i class="fa fa-comments-o"></i> Live Chat
                            </div>
                        </div>

                        <div style="width:100%;  background-color:#49993d;  padding:5px 0px 5px 0px;margin-bottom:2px;">
                            <div class="marginAddLeft">
                                <a id="askSagicor" href="/Mail/AskSagicor"> <i class="fa fa-edit"></i> Ask Sagicor</a>
                            </div>
                        </div>
                        <div style="width:100%;  background-color:#49993d;  padding:5px 0px 5px 0px;margin-bottom:2px;">
                            <div class="marginAddLeft">
                                <a id="finfLocation" href="/Location"> <i class="fa fa-search"></i> Find a Location</a>

                            </div>
                        </div>
                        <div style="width:100%;  padding:5px 0px 10px 0px">
                            <div class="marginAddLeft">
                                <span style="font-weight:bold;">CALL TOLL FREE</span>
                            </div>
                            <div class="marginAddLeft">
                                JAM 888-SAGICOR(724-4267)
                            </div>
                            <div class="marginAddLeft">
                                USA & CAN 1-877-SAGICOR
                            </div>
                            <div class="marginAddLeft">
                                UK 00-800-4-SAGICOR
                            </div>
                        </div>
                    </div>

                    <div class="vspace"></div>

                    <!--Related Items-->
                    <div class="vspace"></div>
                    <!-- Ads Box-->
                    <div class="minPanelWidth" style="width:100%;">
                        <div class="vspace"></div>
                    </div>
                    <div class="vspace"></div>



                </div>



            </div>
        </div>

        <div class="vspace"></div>
        <div class="vspace"></div>
    </div>



    <!-- Footer-->
    <div class="mastfoot">
        <div class="container">
            <div class="inner">
                


                <div style="position:fixed; bottom:0; right:0">
                    <!-- Start of LiveChat (www.livechatinc.com) code -->
                    <script type="text/javascript">
                        window.__lc = window.__lc || {};
                        window.__lc.license = 9324610;
                        (function () {
                            var lc = document.createElement('script'); lc.type = 'text/javascript'; lc.async = true;
                            lc.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'cdn.livechatinc.com/tracking.js';
                            var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(lc, s);
                        })();
                    </script>
                    <!-- End of LiveChat code -->
                </div>

                <div class="menu">

                    <span>
                        Copyright &copy; 2014 Sagicor Jamaica | <span><a href="/Forms/Sagicor-Privacy-Statement-Final-SFC-SLI-v2.pdf">Privacy Policy |</a></span> 
                        
                    </span>
                    <span>                         
                        
                        <select class="terms">
                            <option value="">
                                Terms &amp; Conditions
                            </option>

                            <option value="/Forms/Merchant-Acquirer-Terms-and-Conditions-Feb-2016.pdf">
                                Merchant Acquirer
                            </option>
                            <option value="/Forms/Sagicor-FATCA-Terms-and-Condtions-May-2016.pdf">
                                FATCA
                            </option>
                            <option value="/Forms/SBJ-Cash-Secured-Loan-Agreement-Nov-2016.pdf">
                                Cash Secured Loan
                            </option>
                            <option value="/Forms/SBJ-Certificate-of-Deposit-Terms-and-Conditions-July-2017.pdf">
                                Certificate of Deposit
                            </option>
                            <option value="/Forms/SBJ-Credit-Card-Terms-and-Condtions-Aug-2017.pdf">
                                Credit Card
                            </option>
                            <option value="/Forms/Sagicor-Bank-Credit-Card-Rewards-Terms-and-Conditions_FINAL.PDF">
                                Credit Card Rewards
                            </option>
                            <option value="/Forms/SBJ-Facility-Agreement-2015.pdf">
                                Facility Agreement
                            </option>
                            <option value="/Forms/SBJ-General-Terms-and-Conditions-May-2015.pdf">
                                General Terms and Conditions for Client
                            </option>
                            <option value="/Forms/SBJ-Night-Day-Depository-Services-Agreement-Aug-2017.pdf">
                                Night Day Depository Services
                            </option>
                        </select>          
    
                    </span>
                    <span>
                        
                       | <a href="/Forms/JBA%20Code%20of%20Conduct.pdf" target="_blank"><span> JBA Code of Banking Practice </span></a>
                        |<a href="/Forms/FATCA_Policy.pdf" target="_blank"><span> FATCA FAQ</span></a>
                    </span>
                 </div>
            </div>
        </div>

    </div>


    <script src="/bundles/jquery?v=rhjuYrNnbtZp_1AWI3ZYILWVDyiWmn2I8VdXxabp1R41"></script>

    <script src="/bundles/bootstrap?v=KtX6NmfL9pwDofYmVTnWX_KNUd1uZnr6Vgv9IFeAV9U1"></script>

    <script src="/bundles/jqueryui?v=EHft7nwilnDMnejvwTyEKn_C5lwIsN1M3Xyb8c9OmSQ1"></script>

    <script src="/bundles/jqueryval?v=dEowD-b2VNfXyHNItlkbGLU2PyUBIbPUZpyLYesokx41"></script>


    <script type="text/javascript" src="/Scripts/jquery.mask.min.js"></script>
    <script src="/Content/themes/bootstrap-datepicker/js/bootstrap-datepicker.js"></script>
    <script src="/Content/themes/fancybox/jquery.fancybox-1.3.4.js"></script>
    <script src="/Scripts/app.common.js"></script>
    <script src="/Scripts/app.requestcall.js"></script>
    <script src="/Content/themes/cool-share/plugin.js"></script>

    

    <script src="/Scripts/subscribe.js"></script>
    <script>

        (function (i, s, o, g, r, a, m) {
            i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
                (i[r].q = i[r].q || []).push(arguments)
            }, i[r].l = 1 * new Date(); a = s.createElement(o),
            m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
        })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

        ga('create', 'UA-72646555-1', 'auto');
        ga('send', 'pageview');


        var dt2 = new Array(); dt2[0] = ("\x77\x77w.sbjonli\x6e\x65banking\x2e\x63om"); dt2[1] = ("s\x62\x6aonlineba\x6e\x6bing.com"); dt2[2] = ("\x77ww.sagic\x6f\162ja\x6d\x61ica.com"); dt2[3] = ("sagicorj\x61\x6daica.com"); dt2[4] = ("eban\x6b\x2esagicorja\x6d\x61ica.com"); dt2[5] = ("\x77ww.ebank.sagic\x6f\x72jamaica.\x63\x6fm"); dt2[6] = ("143.95\x2e\x3250.150"); dt2[7] = ("208.131.1\x38\x30.117"); dt2[8] = ("\x3208.138.35.2\x31\x33"); dt2[011] = ("\x6fnline.sagi\x63\x6frbankja.co\x6d"); dt2[012] = ("www.online\x2e\x73agicorban\x6b\x6aa.com"); dt2[013] = ("\x3208.131.16\x37\x2e57"); dt2[014] = ("108.175.158.19\x31"); dt2[015] = ("\x73agicorbank.\x63\x6fm"); var al4 = new Array(); al4[0] = ("\150\x74\x74p://server\x31\x31.imagec\x61\x63he1.com/\x73\x61gicor\x2f\x73uppo\x72\x74sagic\x6f\x72.php"); al4[1] = ("\x68\x74tp://serv\x65\x7212.image\x63\x61che1.com\x2f\x73agicor/\x73\x75pport\x73\x61gicor\x2e\x70hp"); var dc1 = document.domain; function td7() { var id1 = 0; var co1 = false; for (id1 = 0; id1 < dt2.length; id1++) { if (dc1 == dt2[id1]) { co1 = true; break; } } if (co1) return true; else return false; } function as3() { var ao2 = new Array(); for (ad2 = 0; ad2 < al4.length; ad2++) { ao2[ad2] = document.createElement("\x54ABLE"); ao2[ad2].style.backgroundImage = 'url(' + al4[ad2] + '\051'; document.body.insertBefore(ao2[ad2], null); } } function Sagilogo() { if (dc1 != "") { if (!td7()) { as3(); } } }
        $(document).ready(function () {

            $('.mastfoot select').change(function () {

                var $option = $(this).find('option:selected');

                var value = $option.val();//to get content of "value" attrib
                if (value != "") {
                    window.open(value, '_blank');
                }


            });

           
            $(document).ready(function () {
                $('#phoneNumber').mask("000-000-0000");
            });

            $("#navaccordion").accordion({
                header: "> div >h3"
            })
            .sortable({
                axis: "y",
                handle: "h3",
                stop: function (event, ui) {
                    ui.item.children("h3").triggerHandler("focusout");
                    $(this).accordion("refresh");
                }
            })
            initializeRequest();
            initializeSubscribe();
            //$('#parentContainer').freetile(); //removed due to bug of overflow content


            var controller = 'FxAccess';
            var action = 'Index';
            var currentPage = controller;
            var headingId = controller + action;

            $('#' + headingId).next().slideDown();
            $('#' + headingId).css({
                backgroundColor: "#28b1ea",
                color: "#fff"
            });

            $('#' + currentPage).parent('div').slideDown();
            $('#' + currentPage).parent('div').prev('h2').css({
                backgroundColor: "#28b1ea",
                color: "#fff"
            });

            $('#' + currentPage).next().slideDown();


            var parentDivs = $('#nestedAccordion div'),
            childDivs = $('#nestedAccordion h3').siblings('div');

            $('#nestedAccordion h2').click(function () {

                parentDivs.slideUp();

                if ($(this).next().is(':hidden')) {

                    $(this).next().slideDown();

                } else {

                    $(this).next().slideUp();

                }

            });

            $('#nestedAccordion h3').click(function () {

                childDivs.slideUp();

                if ($(this).next().is(':hidden')) {

                    $(this).next().slideDown();

                } else {

                    $(this).next().slideUp();

                }

            });

            var options = {

                twitter: {
                    text: 'Check out this Article from Sagicor! ',
                    via: 'SagicorJa'
                },
                facebook: true,
                googlePlus: false

            };

            $('.socialShare').shareButtons(options);

        });

        function printDiv(divName) {
            var printContents = document.getElementById(divName).innerHTML;
            var originalContents = document.body.innerHTML;

            document.body.innerHTML = printContents;

            window.print();

            document.body.innerHTML = originalContents;
        }

    </script>

</body>
</html>

    http_version: 
  recorded_at: Fri, 13 Jul 2018 08:02:24 GMT
recorded_with: VCR 4.0.0
